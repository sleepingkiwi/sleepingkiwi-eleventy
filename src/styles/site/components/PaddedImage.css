/** .PaddedImage
 *  ------------------------------------------------------------------------------------------------
 *  making images take the correct space even when unloaded
**/

.PaddedImage {
  position: relative;

  & img {
    position: absolute;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
  }
}

.InlineImage {
  /* when we are edge to edge we pad above by a little extra... */
  --flow-space: var(--bsu-l);
}

.InlineImage .Wrap {
  padding: 0;
}

/* when we are edge to edge we want images immediately after CTAs to collapse their top margin */
/* images that follow images on edge-to-edge should also be seamless */
.u-flows > .InlineImage + .InlineImage,
.u-flows > .CTA + .InlineImage {
  --flow-space: 0;
}


@media (--edge-to-edge-ends) {

  .u-flows > .InlineImage + .InlineImage,
  .u-flows > .CTA + .InlineImage,
  .InlineImage {
    --flow-space: var(--bsu);
  }

  .InlineImage .Wrap {
    padding: 0 var(--bsu);
  }
}

/* if the ratio was forced we want the image to cover the available space where possible */
.PaddedImage--forced-ratio {
  overflow: hidden;

  & img {
    top: 50%;
    left: 50%;
    height: auto;
    width: auto;
    max-height: 100%;
    max-width: 100%;
    transform: translateY(-50%) translateX(-50%);

    @supports (object-fit: cover) {
      top: 0;
      left: 0;
      transform: none;
      object-fit: cover;
      height: 100%;
      width: 100%;
    }
  }
}

.PaddedImage--forced-ratio--contain {

  & img {

    @supports (object-fit: contain) {
      object-fit: contain;
    }
  }
}
